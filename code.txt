private void getCon() {
        mAdapter = new conAdapter(chat.this, from, con, con_seen, con_key, reference);
        conversation.setAdapter(mAdapter);

        childEventListener = reference.addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {
                con_key.add(dataSnapshot.getKey());
                    for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
                        from.add(snapshot.getKey());
                        con.add(String.valueOf(snapshot.child("msg").getValue()));
                        con_seen.add(String.valueOf(snapshot.child("seen").getValue()));
                        if (Objects.requireNonNull(snapshot.getKey()).equals(chat_user)) {
                            reference.child(Objects.requireNonNull(dataSnapshot.getKey())).child(snapshot.getKey()).child("seen").setValue(true);
                        }
                    }
                    mAdapter.notifyDataSetChanged();
                    conversation.scrollToPosition(con.size() - 1);
            }

            @Override
            public void onChildChanged(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {
                int index = con_key.indexOf(dataSnapshot.getKey());
                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
                    con_seen.add(index, String.valueOf(snapshot.child("seen").getValue()));
                    mAdapter.notifyDataSetChanged();
                }
            }

            @Override
            public void onChildRemoved(@NonNull DataSnapshot dataSnapshot) {
                Log.d("TEST", "onChildRemoved: "+dataSnapshot);
                int index = con_key.indexOf(dataSnapshot.getKey());
                con_key.remove(index);
                from.remove(index);
                con.remove(index);
                con_seen.remove(index);
                mAdapter.notifyItemRemoved(index);
                mAdapter.notifyItemRangeChanged(index, con_key.size());
            }

            @Override
            public void onChildMoved(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {

            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });

        typing_listener = typing_ref.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                if (dataSnapshot.child(chat_user).exists())
                    typing = (boolean) dataSnapshot.child(chat_user).getValue();

                if (typing) {
                    chat_typing.setVisibility(View.VISIBLE);
                } else
                    chat_typing.setVisibility(View.GONE);
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });
    }